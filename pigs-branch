#!/bin/dash

current_path=$(pwd)
PATH="$PATH:${current_path}"

tmp_commit_info=$(mktemp)
trap 'rm ${tmp_commit_info}' INT HUP QUIT TERM EXIT

tmp_branch_info=$(mktemp)
trap 'rm ${tmp_branch_info}' INT HUP QUIT TERM EXIT

#Check repository
if [ ! -d ".pig" ]
then
	echo "$0: error: pigs repository directory .pig not found"
	exit 1
fi

#Check input
if [ "$#" -gt 2 ]
then
	echo "usage: $0 [-d] <branch>"
	exit 1
fi

#Check commit
if [ ! -d ".pig/object/commit/0" ]
then
	echo "$0: error: this command can not be run until after the first commit"
	exit 1
fi

delete_flag=0
branch_flag=0
commit_id=0
check_d_flag="-d"

branch=$(cat ".pig/HEAD")

if [ $# -eq 0 ]
then
	sort ".pig/branches/info"
	exit 0
fi

#CHECK COMMIT COMMAND
for input in "$@"
do
	if [ "${input}" = "${check_d_flag}" ]
	then
		delete_flag=1
	elif [ "${branch_flag}" -eq 0 ]
	then
		new_branch_name="${input}"
		branch_flag=1
	else
		echo "usage: $0 [-d] <branch>"
		exit 1
	fi
done

#check branch exist
if [ "${branch_flag}" -ne 1 ]
then 
	echo "usage: $0 [-d] <branch>"
	exit 1
fi

#check master branch
if [ "${delete_flag}" -eq 1 ] && [ "${new_branch_name}" = "master" ]
then 
	echo "$0: error: can not delete branch 'master': default branch"
	exit 1
fi

#check current branch
if [ "${delete_flag}" -eq 1 ] && [ "${new_branch_name}" = "${branch}" ]
then 
	echo "$0: error: can not delete branch '${new_branch_name}': current branch"
	exit 1
fi

#check is branch exist
is_branch_exist=$(grep "${new_branch_name}" ".pig/branches/info")
if [ -n "${is_branch_exist}" ] && [ "${delete_flag}" -eq 0 ]
then
	echo "$0: error: branch '${new_branch_name}' already exists"
	exit 1
fi

#check is branch exist
is_branch_exist=$(grep "${new_branch_name}" ".pig/branches/info")
if [ -z "${is_branch_exist}" ] && [ "${delete_flag}" -eq 1 ]
then
	echo "pigs-branch: error: branch '${new_branch_name}' doesn't exist"
	exit 1
fi

while test -d ".pig/object/commit/${commit_id}"
do
	is_branch_in_last_commit=$(grep "branch: ${new_branch_name}" ".pig/object/commit/${commit_id}/commit_info")
	num_branch=$(grep -Ec "branch: .*" ".pig/object/commit/${commit_id}/commit_info")
	#check is merge
	if [ "${delete_flag}" -eq 1 ] && [ -n "${is_branch_in_last_commit}" ] && [ "${num_branch}" -eq 1 ]
	then
		echo "$0: error: branch '${new_branch_name}' has unmerged changes"
		exit 1
	fi
	if [ "${delete_flag}" -eq 1 ] && [ -n "${is_branch_in_last_commit}" ]
	then
		while IFS= read -r line
		do
			if [ "${line}" != "branch: ${new_branch_name}" ]
		    then
		    	echo "${line}" >> "${tmp_commit_info}"
		    fi
		done < ".pig/object/commit/${commit_id}/commit_info"
		cp "${tmp_commit_info}" ".pig/object/commit/${commit_id}/commit_info"
	fi
	commit_id=$((commit_id+1))
done

if [ "${delete_flag}" -eq 1 ]
then
	while IFS= read -r line
	do
		if [ "${line}" != "${new_branch_name}" ]
	    then
	    	echo "${line}" >> "${tmp_branch_info}"
	    fi
	done < ".pig/branches/info"
	cp "${tmp_branch_info}" ".pig/branches/info"
	echo "Deleted branch '${new_branch_name}'"
	exit 0
fi

#CHECK LATEST COMMIT
commit_id=0
selected_commit_id=0
while test -d ".pig/object/commit/${commit_id}"
do
	is_branch_in_commit=$(grep "branch: ${branch}" ".pig/object/commit/${commit_id}/commit_info")
	if [ -n "${is_branch_in_commit}" ] && [ "${selected_commit_id}" -lt "${commit_id}" ]
	then
		selected_commit_id="${commit_id}"
	fi
	commit_id=$((commit_id+1))
done

commit_id=$((commit_id-1))

#CREATE NEW BRANCH
if [ "${delete_flag}" -eq 0 ]
then
	echo "${new_branch_name}" >> ".pig/branches/info"
	echo "branch: ${new_branch_name}" >> ".pig/object/commit/${selected_commit_id}/commit_info"
fi

exit 0
